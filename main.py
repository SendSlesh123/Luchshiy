import telebot
from telebot.types import ReplyKeyboardMarkup
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import os
from dotenv import load_dotenv, find_dotenv
from random import randint
load_dotenv(find_dotenv())
token = os.getenv('token')



bot = telebot.TeleBot(token, parse_mode='HTML')

session = {}
@bot.message_handler(commands=['start', 'help'])
def welcome(message):
    chatID = message.from_user.id
    session[chatID] = {'count' : 0, 'bot_message' : 0, 'num_question': 0}
    bot.reply_to(message, "Hi!")

    markup = ReplyKeyboardMarkup()
    markup.add('–ü—Ä–∏–≤–µ—Ç', '–ù—É –∑–¥—Ä–∞–≤—Å–≤—É–π')

    message_bot = bot.send_message(chatID, message.text, reply_markup= markup)
    session[chatID]['bot_message'] = message_bot.id
    bot.register_next_step_handler(message, second_func)

@bot.message_handler(commands=['test'])
def start_test(message):
    chatID = message.from_user.id
    message_bot = bot.send_message(chatID, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –∫–∞–∫–∏–µ –Ω–∏–±—É–¥—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞")

@bot.message_handler(commands=['command1'])
def send_message_dice(message):
    chatID = message.from_user.id
    bot_message = bot.send_dice(chatID, 'üèÄ')
    print(bot_message.dice.value)

@bot.message_handler(commands=['command2'])
def send_message_welcome(message):
    chatID = message.from_user.id
    bot.send_sticker(chatID, 'CAACAgIAAxkBAAJjFWaCa7GRzJBn--B92cI7tnRuNdXAAAKcDgACLu5YSE3_-MWXQYD0NQQ' )

@bot.message_handler(commands=['command3'])
def send_message_document(message):
    chatID = message.from_user.id
    bot.send_audio(chatID, 'https://file-cdn.online/mobile-rington/_ld/41/4156_top-zvonok.ru__.mp3')

@bot.message_handler(commands=['command4'])
def send_message_buttons(message):
    chatID = message.from_user.id
    markup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton('text1', callback_data='one')
    button2 = InlineKeyboardButton('text2', callback_data='two')
    button3 = InlineKeyboardButton('text3', callback_data='three')
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    bot.send_message(chatID, '–ö–Ω–æ–ø–æ—á–∫–∏', reply_markup= markup)

@bot.message_handler(commands=['game'])
def send_message_game(message):
    chatID = message.from_user.id
    session[chatID]['rand'] = randint(1, 100)
    bot.send_message(chatID, '–ë–æ—Ç –∑–∞–≥–∞–¥–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –í–∞—à–∞ —Ü–µ–ª—å –µ–≥–æ –æ—Ç–≥–∞–¥–∞—Ç—å. –ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—ë—Ç—Å—è 3 –ø–æ–ø—ã—Ç–∫–∏.')
    bot.register_next_step_handler(message, first_try)

def first_try(message):
    chatID = message.from_user.id
    if int(message.text) == session[chatID]['rand']:
        bot.send_message(chatID,'–í—ã –æ—Ç–¥–∞–≥–∞–ª–∏ —á–∏—Å–ª–æ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏. ')
    elif int(message.text) > session[chatID]['rand']:
        bot.send_message(chatID, '–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ. –û—Å—Ç–∞–ª–æ—Å—å 2 –ø–æ–ø—ã—Ç–∫–∏')
        bot.register_next_step_handler(message, second_try)
    elif int(message.text) < session[chatID]['rand']:
        bot.send_message(chatID, '–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ. –û—Å—Ç–∞–ª–æ—Å—å 2 –ø–æ–ø—ã—Ç–∫–∏')
        bot.register_next_step_handler(message, second_try)

def second_try(message):
    chatID = message.from_user.id
    if int(message.text) == session[chatID]['rand']:
        bot.send_message(chatID,'–í—ã –æ—Ç–¥–∞–≥–∞–ª–∏ —á–∏—Å–ª–æ —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏.')
    elif int(message.text) > session[chatID]['rand']:
        bot.send_message(chatID, '–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ. –û—Å—Ç–∞–ª–∞—Å—å 1 –ø–æ–ø—ã—Ç–∫–∞.')
        bot.register_next_step_handler(message, third_try)
    elif int(message.text) < session[chatID]['rand']:
        bot.send_message(chatID, '–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ. –û—Å—Ç–∞–ª–∞—Å—å 1 –ø–æ–ø—ã—Ç–∫–∞.')
        bot.register_next_step_handler(message, third_try)

def third_try(message):
    chatID = message.from_user.id
    if int(message.text) == session[chatID]['rand']:
        bot.send_message(chatID,'–í—ã –æ—Ç–¥–∞–≥–∞–ª–∏ —á–∏—Å–ª–æ —Å —Ç—Ä–µ—Ç—å–µ–π –ø–æ–ø—ã—Ç–∫–∏.')
    else:
        bot.send_message(chatID, '–ü–æ–≤–µ–∑—ë—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑.')
@bot.callback_query_handler(func=lambda callback:True)
def handle_callback(callback):
    chatID = callback.from_user.id
    button_call = callback.data

    if button_call == 'one':
        bot.send_message(chatID, '–í—ã –Ω–∞–∂–∞–ª–∏ 1 –∫–Ω–æ–ø–∫—É')
    if button_call == 'two':
        bot.send_message(chatID, '–í—ã –Ω–∞–∂–∞–ª–∏ 2 –∫–Ω–æ–ø–∫—É')
    if button_call == 'three':
        bot.send_message(chatID, '–í—ã –Ω–∞–∂–∞–ª–∏ 3 –∫–Ω–æ–ø–∫—É')

@bot.message_handler(func=lambda message: True)
def first_func(message):
    chatID = message.from_user.id
    markup = ReplyKeyboardMarkup()
    # markup.add('–ü—Ä–∏–≤–µ—Ç', '–ù—É –∑–¥—Ä–∞–≤—Å–≤—É–π')
    #
    # message_bot = bot.send_message(chatID, message.text, reply_markup= markup)
    # session[chatID]['bot_message'] = message_bot.id
    # bot.register_next_step_handler(message, second_func)

def second_func(message):
    chatID = message.from_user.id
    bot.delete_message(chatID, session[chatID]['bot_message'])
    if message.text == '–ü—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!")
    elif message.text == '–ù—É –∑–¥—Ä–∞–≤—Å–≤—É–π':
        bot.send_message(message.chat.id, "–£–¥–∞—á–Ω–æ–π –¥–æ—Ä–æ–≥–∏, —Å—Ç–∞–ª–∫–µ—Ä!")
    else:
        markup = ReplyKeyboardMarkup()
        markup.add('–ü—Ä–∏–≤–µ—Ç', '–ù—É –∑–¥—Ä–∞–≤—Å–≤—É–π')
        bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–≤—Ç–æ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.register_next_step_handler(message, welcome)

def thirst_func(message):
    bot.send_message(message.chat.id, "–∫–∞–∫–æ–π —Ç–æ —Ç–µ–∫—Å—Ç –Ω–æ–º–µ—Ä 2")



bot.infinity_polling()